testParameters() {

    try {
        exportIteration("TESTIT01", 100, "Funambol");
        fail("expecting an exception");
    } catch (IllegalArgumentException e) {
        //expected behaviour
    }

    try {
      exportIteration("NOITERATION", 25, "formatStoriesIntoCSV");
      fail("was expecting an exception");
    } catch (Exception e) {
      //
      // This is the expected behaviour
      //
    }

    //
    // We want to test that when the printer throws an error the exeption
    // surfaces to the caller
    //
    try {
      exportIteration("TESTIT01", 25, "testPrinterError");
      fail("was expecting an exception");
    } catch (Exception e) {
      //
      // This is the expected behaviour
      //
    }
}

testCSV() {
    TEST1="\"US9\",\"multiple subscriptions access\",\"As a user, I want to be able to ...\",\"Defined\",\"1.0\"";
    TEST2="\"US11\",\"user stories export - Wiki format 1\",\"As a user, I want to export the ...\",\"Defined\",\"1.0\"";
    TEST3="\"US7\",\"stories export - \"\"CSV\"\"\",\"As a user, I want to export the ...\",\"Accepted\",\"5.0\"";

    stories = exportIteration("TESTIT01", 25, "formatStoriesIntoCSV");
    print(stories);
    assert(stories.indexOf(TEST1)>=0);
    assert(stories.indexOf(TEST2)>=0);
    assert(stories.indexOf(TEST3)>=0);

    stories = exportIteration("TESTIT02", 25, "formatStoriesIntoCSV");
    assert(stories.length() == 0);
}

testWiki1() {
    TEST1="||US9||multiple subscriptions access||As a user, I want to be able to access to different subscriptions changing the subscription URL. For example, the two versions of Rally have two different URLs of the SOAP API: [[BR]]  [[BR]]   [[BR]]  [[BR]] * community: https://community.rallydev.com:443/slm/webservice/1.10 [[BR]] * enterprise: https://rally1.rallydev.com:443/slm/webservice/1.10 [[BR]]  [[BR]] This URL should be specified as a system property: [[BR]]  [[BR]] -Drally.host=community.rallydev.com/rally1.rallydev.com||Defined||1.0||";
    TEST2="||US11||user stories export - Wiki format 1||As a user, I want to export the user stories scheduled for an iteration with a simple command in to a form suitable for a wiki page in the form: [[BR]]  [[BR]] <doublepipe>field1<doublepipe>field2<doublepipe>field3<doublepipe>...<doublepipe>||Defined||1.0||";
    TEST3="||US7||stories export - \"CSV\"||As a user, I want to export the user stories scheduled for an iteration with a simple command in to a CSV form.||Accepted||5.0||";
    TEST4="||US20||user story without description|| ||Defined||1.0||";

    stories = exportIteration("TESTIT01", 25, "formatStoriesIntoWiki1");
    print("wiki1: " + stories);
    assert(stories.indexOf(TEST1)>=0);
    assert(stories.indexOf(TEST2)>=0);
    assert(stories.indexOf(TEST3)>=0);
    assert(stories.indexOf(TEST4)>=0);

    stories = exportIteration("TESTIT02", 25, "formatStoriesIntoWiki1");
    assert(stories.length() == 0);
}

testPrinterError(stories) {
    throw RuntimeException();
}

testParameters();
testCSV();
testWiki1();

